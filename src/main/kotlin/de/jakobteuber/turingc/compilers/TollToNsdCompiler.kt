package de.jakobteuber.turingc.compilers

import TollBaseVisitor
import TollLexer
import TollParser
import org.antlr.v4.runtime.CharStream
import org.antlr.v4.runtime.CharStreams
import org.antlr.v4.runtime.CommonTokenStream
import org.antlr.v4.runtime.tree.ParseTree
import java.nio.file.Path


class TollToNsdCompiler : TollBaseVisitor<Unit>() {
    private val codeBuilder = CodeBuilder("#")
    private val constNull = "const-null-autogenerated"

    init {
        codeBuilder.code("INIT $constNull;")
    }

    private var tempVars = 0
    private var tempLabels = 0
    private var currentResultVarName = "??"
    private var currentWhenEnd = "??"
    private var currentWhenExpression = "??"


    private fun tempVarName(): String {
        val tempVarName = "temp-${tempVars++}-autogenerated"
        codeBuilder.add { code("INIT $tempVarName;") }
        return tempVarName
    }

    private fun tempLabelName() = "label-${tempLabels++}-autogenerated"

    private fun whileNotNull(varName: String, action: CodeBuilder.() -> Unit, reusable: Boolean = false): Unit =
        codeBuilder.add {
            val temp = if (reusable) tempVarName() else ""
            val l1 = tempLabelName()
            val l2 = tempLabelName()

            comment("repeat ($varName)") {
                code("LABEL $l1;")
                code("IFNULL $varName GOTO $l2;")

                if (reusable) code("INC $temp;")
                code("DEC $varName;")
                comment("repeat action:") {
                    action()
                }
                code("IFNULL $constNull GOTO $l1;")
                code("LABEL $l2;")

            }

            if (reusable) {
                comment("restoring the previous value of $varName: ") {
                    whileNotNull(temp, "INC $varName;", reusable = false)
                }
            }
        }

    private fun whileNotNull(varName: String, action: String, reusable: Boolean = false) =
        whileNotNull(varName, { code(action) }, reusable)

    private fun assignment(to: String, from: String) = codeBuilder.add {
        comment("variable assignment: $to := $from") {
            whileNotNull(
                to,
                { comment("do nothing inside the loop, just cout $to down to zero") },
                reusable = false
            )
            whileNotNull(from, "INC $to;", reusable = true)
        }
    }

    private fun assignment(to: String, from: Int) = codeBuilder.add {
        comment("variable assignment: $to := $from") {
            whileNotNull(to, "// do nothing inside the loop, just cout down to zero", reusable = false)
            repeat(from) { code("INC $to;") }
        }
    }

    private fun biOperation(
        comment: String,
        left: ParseTree,
        right: ParseTree,
        action: CodeBuilder.(String, String, String) -> Unit
    ) =
        codeBuilder.comment(comment) {
            val leftResult = tempVarName()
            val rightResult = tempVarName()
            val result = currentResultVarName

            currentResultVarName = leftResult
            visit(left)
            currentResultVarName = rightResult
            visit(right)

            codeBuilder.action(leftResult, rightResult, result)
        }

    override fun visitNumber(ctx: TollParser.NumberContext) =
        assignment(currentResultVarName, Integer.parseInt(ctx.number.text))

    override fun visitVarUse(ctx: TollParser.VarUseContext) =
        assignment(currentResultVarName, ctx.name.text)

    override fun visitAdd(ctx: TollParser.AddContext) =
        biOperation("computing: ${ctx.humanizedText}", ctx.left, ctx.right) { left, right, result ->
            assignment(result, left)
            whileNotNull(right, "INC $result;")
        }

    override fun visitSub(ctx: TollParser.SubContext) =
        biOperation("computing: ${ctx.humanizedText}", ctx.left, ctx.right) { left, right, result ->
            assignment(result, left)
            whileNotNull(right, "DEC $result;")
        }

    override fun visitMult(ctx: TollParser.MultContext) =
        biOperation("computing: ${ctx.humanizedText}", ctx.left, ctx.right) { left, right, result ->

            val temp = tempVarName()
            whileNotNull(right, {
                assignment(temp, left)
                whileNotNull(temp, "INC $result;")
            })
        }

    override fun visitDiv(ctx: TollParser.DivContext) =
        biOperation("computing: ${ctx.humanizedText}", ctx.left, ctx.right) { left, right, result ->

            val temp = tempVarName()
            whileNotNull(right, {
                assignment(temp, left)
                whileNotNull(temp, "DEC $result;")
            })
        }

    override fun visitVarInit(ctx: TollParser.VarInitContext) =
        codeBuilder.comment("var init: ${ctx.humanizedText}") {
            code("INIT ${ctx.name}")
            currentResultVarName = ctx.name.text
            visit(ctx.expr)
        }

    override fun visitVarModification(ctx: TollParser.VarModificationContext) =
        codeBuilder.comment("var modification: ${ctx.humanizedText}") {
            currentResultVarName = ctx.name.text
            visit(ctx.expr)
        }

    override fun visitBoolean(ctx: TollParser.BooleanContext) =
        codeBuilder.comment("Literal: ${ctx.humanizedText}") {
            assignment(currentResultVarName, 0)
            if (ctx.bool.text != "true") {
                code("INC $currentResultVarName;")
            }
        }

    override fun visitOr(ctx: TollParser.OrContext) =
        biOperation("computing: ${ctx.humanizedText}", ctx.left, ctx.right) { left, right, result ->

            val l1 = tempLabelName()
            val l2 = tempLabelName()
            assignment(result, 1)
            code("IFNULL $left GOTO $l1;")
            code("IFNULL $right GOTO $l1;")
            code("IFNULL $constNull GOTO $l2;")
            code("LABEL $l1;")
            code("DEC $result;")
            code("LABEL $l2;")
        }

    override fun visitAnd(ctx: TollParser.AndContext) =
        biOperation("computing: ${ctx.humanizedText}", ctx.left, ctx.right) { left, right, result ->

            val l1 = tempLabelName()
            val l2 = tempLabelName()
            val l3 = tempLabelName()

            assignment(result, 1)
            code("IFNULL $left GOTO $l1;")
            code("IFNULL $constNull GOTO $l3")
            code("LABEL $l1;")
            code("IFNULL $right GOTO $l2;")
            code("IFNULL $constNull GOTO $l3;")
            code("LABEL $l2;")
            code("DEC $result;")
            code("LABEL $l3;")
        }

    override fun visitEqual(ctx: TollParser.EqualContext) =
        biOperation("computing: ${ctx.humanizedText}", ctx.left, ctx.right) { left, right, result ->

            val tempLeft = tempVarName()
            val tempRight = tempVarName()
            val l1 = tempLabelName()
            val l2 = tempLabelName()
            val end = tempLabelName()

            assignment(result, 1)
            assignment(tempLeft, left)
            assignment(tempRight, right)

            whileNotNull(left, "DEC $right;")
            code("IFNULL $right GOTO $l1;")
            code("IFNULL $constNull GOTO $end;")
            code("LABEL $l1;")

            assignment(left, tempLeft)
            assignment(right, tempRight)
            whileNotNull(right, "DEC $left;")

            code("IFNULL $left GOTO $l2;")
            code("IFNULL $constNull GOTO $end;")
            code("LABEL $l2;")
            code("DEC $result;")
            code("LABEL $end;")
        }

    private fun isLess(biggerTree: ParseTree, smallerTree: ParseTree) =
        biOperation(
            "computing: ${biggerTree.text} < ${smallerTree.text}",
            biggerTree,
            smallerTree
        ) { bigger, smaller, result ->

            val l1 = tempLabelName()
            val end = tempLabelName()

            assignment(result, 1)
            whileNotNull(bigger, "DEC $smaller;")
            code("IFNULL $smaller GOTO $l1;")
            code("IFNULL $constNull GOTO $end;")
            code("LABEL $l1;")
            code("DEC $result;")
            code("LABEL $end;")
        }

    override fun visitLess(ctx: TollParser.LessContext) = isLess(ctx.bigger, ctx.smaller)
    override fun visitMore(ctx: TollParser.MoreContext) = isLess(ctx.bigger, ctx.smaller)

    override fun visitIf(ctx: TollParser.IfContext) =
        codeBuilder.comment("if (${ctx.condition.humanizedText})") {
            currentResultVarName = tempVarName()
            val result = currentResultVarName
            visit(ctx.condition)

            val l1 = tempLabelName()
            val end = tempLabelName()

            code("IFNULL $result GOTO $l1;")
            code("IFNULL $constNull GOTO $end;")
            code("LABEL $l1;")

            comment("then do:") {
                visit(ctx.ifContent)
            }
            code("LABEL $end;")
        }

    override fun visitIfElse(ctx: TollParser.IfElseContext) =
        codeBuilder.comment("if (${ctx.condition.humanizedText})") {
            currentResultVarName = tempVarName()
            val result = currentResultVarName
            visit(ctx.condition)

            val l1 = tempLabelName()
            val end = tempLabelName()
            code("IFNULL $result GOTO $l1;")
            comment("the do:") {
                visit(ctx.elseContent)
            }
            code("IFNULL $constNull GOTO $end;")
            ; code("LABEL $l1;")
            comment("else do:") {
                visit(ctx.ifContent)
            }
            code("LABEL $end;")
        }

    override fun visitWhile(ctx: TollParser.WhileContext) =
        codeBuilder.comment("while (${ctx.condition.humanizedText})") {
            val aboveWhile = tempLabelName()
            val l1 = tempLabelName()
            val belowWhile = tempLabelName()
            currentResultVarName = tempVarName()
            val result = currentResultVarName

            code("LABEL $aboveWhile;")
            comment("while condition: ") {
                visit(ctx.condition)
            }
            code("IFNULL $result GOTO $l1;")
            code("IFNULL $constNull GOTO $belowWhile;")
            code("LABEL $l1;")
            comment("while body:") {
                visit(ctx.content)
            }
            code("IFNULL $constNull GOTO $aboveWhile;")
            code("LABEL $belowWhile;")
        }

    override fun visitWhen(ctx: TollParser.WhenContext) =
        codeBuilder.comment("when (${ctx.value.humanizedText})") {
            val result = tempVarName()
            currentResultVarName = result
            val oldWhenEnd = currentWhenEnd
            val newWhenEnd = tempLabelName()
            currentWhenEnd = newWhenEnd
            val oldWhenExpression = currentWhenExpression
            currentWhenExpression = result

            comment("computing: when value:") {
                visit(ctx.value)
            }
            visit(ctx.content)
            code("LABEL $newWhenEnd;")

            currentWhenEnd = oldWhenEnd
            currentWhenExpression = oldWhenExpression
        }

    override fun visitWhenContent(ctx: TollParser.WhenContentContext) =
        codeBuilder.comment("when branch: ${ctx.value.humanizedText} -> {...}") {
            val expression = tempVarName()

            currentResultVarName = expression
            visit(ctx.value)

            val tLeft = tempVarName()
            val tRight = tempVarName()
            val l1 = tempLabelName()
            val l2 = tempLabelName()
            val end = tempLabelName()

            assignment(tLeft, currentWhenExpression)
            assignment(tRight, expression)
            whileNotNull(tLeft, "DEC $tRight;")
            code("IFNULL $tRight GOTO $l1;")
            code("IFNULL $constNull GOTO $end;")
            code("LABEL $l1;")
            assignment(tLeft, currentWhenExpression)
            assignment(tRight, expression)
            whileNotNull(tRight, "DEC $tLeft;")
            code("IFNULL $tLeft GOTO $l2;")
            code("IFNULL $constNull GOTO $end;")
            code("LABEL $l2;")
            comment("when branch content:") {
                visit(ctx.content)
            }
            code("IFNULL $constNull GOTO $currentWhenEnd;")
            code("LABEL $end;")
        }

    override fun visitReturn(ctx: TollParser.ReturnContext) =
        codeBuilder.comment("return ${ctx.expr.humanizedText}") {
            val result = tempVarName()
            currentResultVarName = result
            visit(ctx.expr)
            code("RETURN $result;")
        }

    companion object {
        fun compile(code: String) = compile(CharStreams.fromString(code))
        fun compile(file: Path) = compile(CharStreams.fromPath(file))

        private fun compile(code: CharStream): String {
            val lexer = TollLexer(code)
            val tokens = CommonTokenStream(lexer)
            val parser = TollParser(tokens)

            val visitor = TollToNsdCompiler()
            visitor.visit(parser.instrList())
            return visitor.codeBuilder.resultingCode()
        }
    }
}
